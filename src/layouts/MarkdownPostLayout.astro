---
import Badge from "../components/badge.astro";
import Layout from "./Layout.astro";
import TableOfContentsHeading from "../components/tableOfContentsHeading.astro";
const { frontmatter, headings } = Astro.props;
const { tags, pubDate } = frontmatter;

const toc = buildToc(headings);

function buildToc(headings: any) {
  const toc = [] as any;
  const parentHeadings = new Map();
  headings.forEach((h: any) => {
    const heading = { ...h, subheadings: [] };
    parentHeadings.set(heading.depth, heading);
    // Change 2 to 1 if your markdown includes your <h1>
    if (heading.depth === 2) {
      toc.push(heading);
    } else {
      parentHeadings.get(heading.depth - 1).subheadings.push(heading);
    }
  });
  return toc;
}

import "remark-github-blockquote-alert/alert.css";
import GoBack from "../components/goBack.astro";
import Footer from "../components/footer.astro";
---

<Layout title={`${frontmatter.title} | renzofbn`}>
  <!-- <div class="tracker"></div> -->
  <div class="flex justify-center">
    <div
      class="container max-w-4xl text-left px-6 md:px-24 mt-6 lg:mt-10 2xl:mt-16"
    >
      <GoBack url="/posts" />
      <div class="md:px-8">
        <div class="mb-6">
          <div class="mt-8 md:mt-12">
            <span class="text-xs md:text-sm text-gray-400">
              {
                new Date(pubDate).toLocaleDateString("en-US", {
                  year: "numeric",
                  month: "short",
                  day: "numeric",
                })
              }
            </span>
            <h1
              class="text-3xl font-extrabold text-white duration-150 first:pl-0 last:pr-0 drop-shadow-[0px_0px_10px_#666666]"
            >
              {frontmatter.title}
            </h1>
          </div>

          <p class="text-sm md:text-base text-gray-400">
            {frontmatter.description}
          </p>
        </div>
        <div class="flex items-center gap-2 border-b-2 border-neutral-800 pb-4">
          {
            tags.map((tag: string) => (
              <Badge>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="w-3 h-3"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="#e07d48"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="lucide lucide-hash"
                >
                  <>
                    <line x1="4" x2="20" y1="9" y2="9" />
                    <line x1="4" x2="20" y1="15" y2="15" />
                    <line x1="10" x2="8" y1="3" y2="21" />
                    <line x1="16" x2="14" y1="3" y2="21" />
                  </>
                </svg>
                {tag}
              </Badge>
            ))
          }
        </div>
        <article class="md-post">
          <nav class="toc border-b-2 border-neutral-800 py-6 mb-12">
            <span class="font-medium">Table of Contents:</span>
            <ol
              class="mt-5 mb-3 list-decimal list-inside leading-7 marker:text-[#A3A3A3] marker:font-medium px-2 text-white"
            >
              {
                toc.map((heading: any) => (
                  <TableOfContentsHeading heading={heading} />
                ))
              }
            </ol>
          </nav>
          <slot />
          <button
            id="scrollToTop"
            class="fixed bottom-6 right-6 z-50 rounded-full shadow-lg transition-opacity duration-300 opacity-100 bg-[#121313] p-4 md:hover:opacity-20 hidden"
            onclick="window.scrollTo({ top: 0, behavior: 'smooth' })"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="w-6 h-6"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="lucide lucide-arrow-up"
              ><path d="m5 12 7-7 7 7"></path><path d="M12 19V5"></path></svg
            >
          </button>
        </article>
        <Footer />
      </div>
    </div>

    <script>
      // @ts-nocheck
      function setupScrollToTop() {
        const scrollToTopBtn = document.getElementById("scrollToTop");

        if (!scrollToTopBtn) return;

        window.addEventListener("scroll", function () {
          if (window.scrollY > 300) {
            scrollToTopBtn.classList.remove("hidden", "opacity-0");
            scrollToTopBtn.classList.add("opacity-100");
          } else {
            scrollToTopBtn.classList.add("hidden", "opacity-0");
            scrollToTopBtn.classList.remove("opacity-100");
          }
        });
      }

      // Agrega botones de copiar a cada bloque de código
      function createCopyButtons() {
        document.querySelectorAll("pre").forEach((block) => {
          if (!block.parentElement.classList.contains("code-wrapper")) {
            // Crear el contenedor div
            let wrapper = document.createElement("div");
            wrapper.classList.add("code-wrapper");
            wrapper.style.display = "flex";
            wrapper.style.marginBottom = "20px";
            wrapper.style.width = "100%"; // Hace que ocupe todo el ancho del padre

            // Crear el botón de copiar
            // Evitar botones duplicados
            let copyButton = document.createElement("copy-code-button");
            block.style.position = "relative"; // Asegura que el botón se posicione correctamente
            block.appendChild(copyButton);

            // Insertar los elementos en el contenedor
            block.parentNode.insertBefore(wrapper, block);
            wrapper.appendChild(block);
            wrapper.appendChild(copyButton);
          }
        });
      }

      function addStyleToTitle() {
        // const h1s = document.querySelectorAll("article.md-post h1");
        // h1s.forEach((title) => {
        //   if (
        //     title.firstElementChild &&
        //     title.firstElementChild.tagName.toLowerCase() === "span"
        //   ) {
        //     return;
        //   }
        //   title.innerHTML = `<span class="text-3xl font-bold text-[#F46161]"> # </span> ${title.innerHTML}`;
        // });

        let h2s = document.querySelectorAll("article.md-post h2");
        h2s.forEach((title) => {
          if (
            title.firstElementChild &&
            title.firstElementChild.tagName.toLowerCase() === "span"
          ) {
            return;
          }
          title.innerHTML = `<span class="text-3xl font-bold text-[#F46161]"> # </span> ${title.innerHTML}`;
        });

        let h3s = document.querySelectorAll("article.md-post h3");
        h3s.forEach((title) => {
          if (
            title.firstElementChild &&
            title.firstElementChild.tagName.toLowerCase() === "span"
          ) {
            return;
          }
          title.innerHTML = `<span class="text-2xl font-bold text-[#E07D48]"> ## </span> ${title.innerHTML}`;
        });

        let h4s = document.querySelectorAll("article.md-post h4");
        h4s.forEach((title) => {
          if (
            title.firstElementChild &&
            title.firstElementChild.tagName.toLowerCase() === "span"
          ) {
            return;
          }
          title.innerHTML = `<span class="text-xl font-bold text-[#4E9E76]"> ### </span> ${title.innerHTML}`;
        });

        // 985BC4
      }

      class CopyCodeButton extends HTMLElement {
        constructor() {
          super();
          this._isCopied = false;
          this.attachShadow({ mode: "open" });
          this.render();
        }

        connectedCallback() {
          this.shadowRoot
            .querySelector("button")
            .addEventListener("click", () => this.copyCode());
        }

        disconnectedCallback() {
          this.shadowRoot
            .querySelector("button")
            .removeEventListener("click", () => this.copyCode());
        }

        copyCode() {
          this._isCopied = true;
          const pre = this.parentElement;
          let code = pre.querySelector("code");
          const range = document.createRange();
          range.selectNode(code);
          window.getSelection().removeAllRanges();
          window.getSelection().addRange(range);

          if (!navigator.clipboard) {
            document.execCommand("copy");
          } else {
            try {
              navigator.clipboard.writeText(range.toString());
            } catch (error) {
              console.error(error);
            }
          }
          window.getSelection().removeAllRanges();

          this.updateButton();
          setTimeout(() => {
            this._isCopied = false;
            this.updateButton();
          }, 1000);
        }

        updateButton() {
          this.shadowRoot.querySelector("button").innerHTML = this._isCopied
            ? this.checkIcon()
            : this.copyIcon();
        }

        render() {
          this.shadowRoot.innerHTML = `
      <style>

        button {
          display: inline-flex;
          width: fit-content;
          margin: 0;
          padding: 0.5rem;
          background: #121313;
          border: none;
          border-radius: 0.25rem;
          color: #fff;
          cursor: pointer;
          font-weight: 600;
        }
        button:hover {
          background: #1a1b1c;
        }
      </style>
      <button>${this.copyIcon()}</button>
    `;
        }

        copyIcon() {
          return `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-copy"><rect width="14" height="14" x="8" y="8" rx="2" ry="2"/><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/></svg>`;
        }

        checkIcon() {
          return `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-check"><path d="M20 6 9 17l-5-5"/></svg>`;
        }
      }

      customElements.define("copy-code-button", CopyCodeButton);

      // Ejecutar cuando la página haya cargado
      document.addEventListener("DOMContentLoaded", addStyleToTitle);
      document.addEventListener("DOMContentLoaded", createCopyButtons);
      document.addEventListener("DOMContentLoaded", setupScrollToTop);
    </script>

    <style is:global>
      /* .md-post h1 {
        font-size: 30px;
        padding-top: 30px;
        margin-bottom: 24px;
        font-weight: 600;
        color: white;
      } */

      .md-post h2 {
        font-size: 30px;
        padding-top: 30px;
        margin-bottom: 1rem;
        font-weight: 600;
      }

      .md-post h3 {
        font-size: 24px;
        padding-top: 24px;
        margin-bottom: 1rem;
        font-weight: 600;
      }

      .md-post h4 {
        font-size: 20px;
        padding-top: 20px;
        margin-bottom: 1rem;
        font-weight: 600;
      }

      .md-post h5,
      .md-post h6 {
        font-size: 18px;
        padding-top: 18px;
        margin-bottom: 1rem;
        font-weight: 600;
      }

      .md-post p {
        font-size: 16px;
        font-weight: 400;
        margin-bottom: 20px;
        color: #d4d4d4;
        line-height: 28px;
        text-wrap: pretty;
      }

      .md-post p strong {
        font-weight: 700;
        color: #e07d48;
      }

      .md-post pre {
        padding: 1rem;
        border-radius: 0.75rem 0 0 0.75rem;
        overflow-x: auto;
        font-size: 15px;
        width: 100%;
      }

      /* Estilos globales para todas las barras de desplazamiento */
      * {
        scrollbar-width: thin; /* Hace la barra más delgada en Firefox */
        scrollbar-color: #555 #121212; /* Color del thumb y del fondo en Firefox */
      }

      /* Para navegadores basados en WebKit (Chrome, Edge, Safari) */
      ::-webkit-scrollbar {
        width: 8px;
        height: 8px;
      }

      /* Color del fondo de la barra */
      ::-webkit-scrollbar-track {
        background: #121212; /* Muy oscuro */
        border-radius: 4px;
      }

      /* Color y estilo del "thumb" (el indicador de desplazamiento) */
      ::-webkit-scrollbar-thumb {
        background: #555; /* Gris oscuro */
        border-radius: 4px;
      }

      /* Cuando el usuario pasa el mouse sobre la barra */
      ::-webkit-scrollbar-thumb:hover {
        background: #777; /* Gris más claro */
      }

      .md-post copy-code-button {
        background-color: #121212;
        border-radius: 0 0.75rem 0.75rem 0;
        padding-right: 4px;
        padding-top: 6px;
        padding-left: 4px;
      }

      .md-post pre code span {
        font-family: "Geist Mono", system-ui, sans-serif;
        font-weight: 500;
      }

      .md-post p code {
        font-family: "Geist Mono", system-ui, sans-serif;
        background-color: rgba(38, 38, 38, 0.5);
        border: 1px solid rgb(38, 38, 38);
        border-radius: 4px;
        color: white;
        display: inline;
        font-size: 14px;
        font-weight: 600;
        line-height: 24.5px;
        padding: 2px;
        text-wrap: pretty;
      }

      @media (max-width: 768px) {
        .md-post pre {
          font-size: 13px;
        }
      }
    </style>
  </div>
</Layout>
